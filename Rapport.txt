(***********************************************************************)
(*                           1. Identifiants                           *)                       
(***********************************************************************)

Etudiant 1:

Nom : Le Corre
Prénom : Léo 
Pseudonyme personnel : KarmaEssence
Identifiant gitlab : @lecorre
Numéro d'étudiant : 21951620

Etudiant 2:

Nom : Quach
Prénom : Kévin 
Pseudonyme personnel : Ibbo
Identifiant gitlab : @quach
Numéro d'étudiant : 71800727

(***********************************************************************)
(*                           2. Fonctionnalités                        *)                       
(***********************************************************************)

Fonctionnalités du rendu 1 : 

    - "read_polish" : Transformation de la syntaxe concrète (Polish) en syntaxe abstraite (ocaml)
    - "print_polish" : Transformation de la syntaxe abstraite (ocaml) en syntaxe concrète (Polish),
                       puis affichage du code obtenu

Fonctionnalités du rendu 2 :  

    - "simpl_polish" : Prend du code abstrait en entré et renvoie une version simplifié de ce programme
    - "vars_polish" : calcul statique des variables risquant d’être accédées avant d’être écrites
    - "sign_polish" : analyse statique du signe possible des variables lors du déroulement
    du programme, et application à la détermination du risque de division par zéro
    
(***********************************************************************)
(*                           3. Compilation et exécution               *)                       
(***********************************************************************) 

Compilation du projet : 

    make

Execution du projet : 

    ./run -<option> <Nom du fichier> 

    options disponibles : 

    ./run -reprint <Nom du fichier>
    ./run -eval <Nom du fichier>
    ./run -simpl <Nom du fichier>
    ./run -var <Nom du fichier>
    ./run -sign <Nom du fichier>

    (Plus de détails sur les options dans le fichier polish.ml)

(***********************************************************************)
(*                           4. Découpage modulaire                    *)                       
(***********************************************************************)  

Module Types : 

    - Description : Pour stocker les données d'un code polish
    - Utilité : Tous les modules en ont besoin

Module Utility_pf5 : 

    - Description : Stocke des fonctions réutilisable par d'autre
        module 
    - Utilité : Tous les modules en ont besoin    

Module Polish : 

    - Description : Renvoie le résultat d'une commande
    - Utilité : Utile pour récupérer le résultat

Module Read_polish : 

    - Description : Transformation de la syntaxe concrète (Polish) en syntaxe abstraite (ocaml)
    - Utilité : Utile pour les modules print_polish, eval_polish, simpl_polish,
                vars_polish, sign_polish           
     
Module Print_polish : 

    - Description : Réaffichage du code en syntaxe concrète (Polish)
    - Utilité : Ne dépend d'aucun module   

Module Eval_polish : 

    - Description : Evalutation du code en syntaxe abstraite (ocaml)
    - Utilité : Ne dépend d'aucun module 

Module Simpl_polish : 

    - Description : Simplification du code en syntaxe abstraite (ocaml)
    - Utilité : Ne dépend d'aucun module      

Module Vars_polish : 

    - Description : Calcul statique des variables risquant d’être
     accédées avant d’être écrites
    - Utilité : Ne dépend d'aucun module 
                     
Module Sign_polish : 

    - Description : analyse statique du signe possible des variables lors du déroulement
    du programme, et application à la détermination du risque de division par zéro
    - Utilité : Ne dépend d'aucun module                      
(***********************************************************************)
(*                           5. Organisation du travail                *)                       
(***********************************************************************) 

Du 30 novembre au 3 décembre : 

    - Début du projet, étude du sujet, réflexion sur la distribution du travail (par Léo et Kévin)
    - Mise en place du read et print polish (par Léo)

Du 3 décembre au 8 décembre :

    - Mise en place du simpl polish (par Kévin)

Du 8 décembre au 15 décembre : 
    
    - Mise en place du eval polish à l'aide de simpl polish (par Kévin)
    - Correction du code, creation du fichier Rapport.txt (par Léo)

Du 24 décembre au 31 décembre :   

    - Mise en place du vars_polish (par Léo)
    - Mise en place du sign_polish (par Kévin)

(***********************************************************************)
(*                           6. Misc                                   *)                       
(***********************************************************************)    

Pas de commentaire, ni de question
